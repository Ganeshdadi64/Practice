1)what are the new feature of java17?

i)sealed classes
   Sealed classes restrict which other classes can extend them.
   Useful for defining controlled hierarchies.

 use cases:This is useful for ensuring better encapsulation, maintainability, and security.
 // Only Car and Truck can extend Vehicle
 public sealed class Vehicle permits Car, Truck {}

 final class Car extends Vehicle {}   // Allowed
 final class Truck extends Vehicle {} // Allowed
 // class Bus extends Vehicle {}   // ‚ùå Compilation Error


ii)‚úÖ Pattern Matching for Switch (Preview) ‚Äì JEP 406
   Enables more concise switch expressions with pattern matching.


   static void printValue(Object obj) {
       switch (obj) {
           case Integer i -> System.out.println("Integer: " + i);
           case String s -> System.out.println("String: " + s);
           default -> System.out.println("Unknown");
       }
   }


actuall ga switch syntax nee modify chesaru



1. Oops
2. Why multiple inheritance not possible
3. Wap to find larger num
4. Wap to find  2nd largest num
5. Java 8 features
6. Lambda expression   skip
7. Do 3,4 using lambda
===================================================
import java.util.function.BiFunction;

public class LambdaLargerNumber {
    public static void main(String[] args) {
        // Lambda to find the larger number
        BiFunction<Integer, Integer, Integer> findLarger = (a, b) -> (a > b) ? a : b;

        int num1 = 3;
        int num2 = 4;

        int result = findLarger.apply(num1, num2);

        System.out.println("The larger number is: " + result);
    }
}

8. Even num program  skip
===================================
9. Design patterns   skip
10. Singleton pattern and it's implementation  skip
11. Springboot annotations   skip
12. @qualifier annotations skip

13. Actuators
======================================
Spring Boot Actuator provides built-in endpoints that give insight into your app‚Äôs health, metrics,
logs, environment, and more ‚Äî without writing extra code.

14. Different methods in rest get put post ...  skp
=================================================
15. What is rest api   ----  skip
16. Jpa entity               skip
17. Sql query to find 2nd highest salary
SELECT DISTINCT salary
FROM Employee
ORDER BY salary DESC
LIMIT 1 OFFSET 1;

18. Types of join   skip
=======================
19. Javascript == and === difference  skip

20. Js how do you call apis

21. Why css is used
22. Java streams ?
23. Difference between areaylist and linkedlist    skip
24. Difference between hashmap and hashtable
üß± 3. Null Keys & Values
Feature	             HashMap	   Hashtable
Allows null key?	‚úÖ Yes (only one)	‚ùå No
Allows null values?	‚úÖ Yes	            ‚ùå No
25. What are collecections


1. Whay only writing main in public static void main (STRING ...ARGS)
‚úÖ So, main is not just any method ‚Äî it‚Äôs the standard method name that JVM is hardcoded to call when a program starts.

Keyword	Meaning
public	JVM needs to access it from outside the class, so it must be public.
static	No object needed to call it. JVM can directly invoke it without creating an object.
void	It doesn't return anything.
main	The method name that JVM looks for. Must be exactly main.
String[] args	This is how command-line arguments are passed to your program.


2. Why string args and not obj3ct args   skip

3. What is reflection

ü™û What is Reflection in Java?
Reflection is a feature in Java that allows you to:

Inspect and manipulate classes, methods, fields, and constructors at runtime ‚Äî even if you don‚Äôt know them at compile time.

.

üîç What Can You Do with Reflection?
‚úÖ Inspect class name, methods, fields, annotations
‚úÖ Access private fields and methods
‚úÖ Create objects at runtime
‚úÖ Call methods dynamically
‚úÖ Change values of fields even if they‚Äôre private



4. What is dependency injection how it's working internally
===========================================================
Dependency Injection is a design pattern where objects are given their dependencies from the outside,
rather than creating them inside the class.



üß† Internally:

Explain @Sevice and @Repository annotations

In Spring Framework (specifically Spring Boot), @Service and @Repository are stereotype
annotations used to define classes as Spring-managed components and to give them specific
roles within the application architecture. These annotations help Spring in recognizing which
classes are part of the service layer and persistence layer, respectively.
Spring scans all classes with @Component, @Service, etc.


üîπ @Service Annotation
Purpose:
Marks a class as a Service component, which typically contains business logic.

How it works:

Internally, @Service is a specialization of @Component, so the class is automatically
detected during component scanning and registered as a Spring bean.


üîπ @Repository Annotation
Purpose:
Marks a class as a DAO (Data Access Object) or Repository component, which directly
interacts with the database.


When it sees @Autowired and how it works ?

@Autowired is a Spring annotation that tells the Spring container to automatically inject a bean into another bean.
It's part of Spring's Dependency Injection mechanism.



Q)What is the use of @configuration
========================================
‚öôÔ∏è How It Works (Simple Terms)
When the application starts, Spring looks for classes marked with @Configuration.

It processes the methods annotated with @Bean inside that class.

Spring calls those methods and takes the returned objects, and then registers them as beans in the Spring container.

These beans can then be injected anywhere using @Autowired or constructor injection.


Uses reflection to find the field/constructor


Uses Field.set() or constructor injection to inject it

5.How does arraylist increases its size?

6)How do you perform search in linkedlist

7) In what scenario arraylist is better and when linkedlist

8)How all annotations are working?

9)What is bean and dependent injection


10)Real world example of linked list

  Reflection
  How to break singleton
  Filter internal  working



  Q)

  1. Write a Java program by make use of functional interface and find whether the number is even or odd
  2. Write a Java program to write the count of vowels in the string
  3. Also implement above using Java streams
  4. How do you handle exceptions in Spring boot application
  5. What do you know about deployment process of your code into server.  And are the servers on cloud?
  6. What is difference between normal tey catch block and try with resource block



  1. Explain about your latest project
  2. What are available servers in Spring boot
  3. How you will configure tomcat server in Spring boot, syntaxes for server configuration in applications.properti3s file
  4. Default port number of tomact
  5. What happens if we give port as 0
  6. What is use springboot dev tools and how to configure
  7. How to debug Spring Boot application
  8. Given an array of numbers find the 2nd largest number using Java 8 feature
  9. Given array of number print distinct elements in array using Java 8 feature
  10. Given an array of numbers print only multiple of 5 using Java 8 feature
  11. Explain Java 21 feature,  Java 8 feature
  12. Explain how filter works internally  (ans: predicate, predicate.test)
  13. Explain about lambda
  14. Explain about types of predicates available
  15. Why streams are introduced
  16. Why Java 8 is introduced
  17. What is singleton pattern
  18. How can you break singleton pattern
  19. Exceptional handling in Spring boot
  20. Explain about checked and unchecked exceptions
  21. Given you have nullpoonter exception, index out of bound exception, what will be the order you will be writing
  22. What is rate limiters
  23. What do you know about idempotency
  24. How do you handle disabling of multiple clicks so that the record don't get created ( idempotent apis)
  25. Different api method
  26. what is reflection
  27. How can you break singleton pattern


