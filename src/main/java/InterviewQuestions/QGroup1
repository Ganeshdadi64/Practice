1)What is the purpose of default methods in interface in java8?

Why Default Methods Were Introduced in Java 8
Before Java 8, interfaces could only have abstract methods, which meant
every class implementing an interface had to provide implementations for
all its methods. While this was fine in many cases, it posed significant
challenges when extending or modifying existing interfaces. Here's a deep
dive into the problems, solutions, and the reasoning behind the introduction
of default methods in Java 8.


1. The Problem: Backward Compatibility
Suppose an interface is widely used by multiple classes in a large application or library. For example:

interface Vehicle {
    void start();
    void stop();
}
Many classes might implement this interface:

class Car implements Vehicle {
    public void start() {
        System.out.println("Car starting...");
    }
    public void stop() {
        System.out.println("Car stopping...");
    }
}

class Bike implements Vehicle {
    public void start() {
        System.out.println("Bike starting...");
    }
    public void stop() {
        System.out.println("Bike stopping...");
    }
}

Problem:
========

Now, if you want to add a new method to the Vehicle interface
(e.g., void refuel()), you would break every single class that implements
this interface. Each class would now be required to implement the new
refuel() method, even if it doesn't need it:

interface Vehicle {
    void start();
    void stop();
    void refuel(); // Added method
}


Impact: This change would force all existing implementations (Car, Bike, etc.)
to update their code, which can be costly and time-consuming.

2. The Solution: Default Methods
To solve this backward compatibility issue, default methods were introduced
 in Java 8. With default methods, you can provide a default implementation
  directly in the interface, so existing classes don‚Äôt have to override
  them unless they want to provide a custom implementation.


interface Vehicle {
    void start();
    void stop();

    // New default method
    default void refuel() {
        System.out.println("Default refueling...");
    }
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car starting...");
    }

    public void stop() {
        System.out.println("Car stopping...");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle car = new Car();
        car.start();   // Output: Car starting...
        car.refuel();  // Output: Default refueling...
    }
}



2)if i have 2 interfaces having same name default methods and the class car implemets bothe the
interfaces which methode is execute?


interface A {
    default void show() {
        System.out.println("A's show");
    }
}

interface B {
    default void show() {
        System.out.println("B's show");
    }
}

class C implements A, B {
    @Override
    public void show() {
        // Explicitly specify which interface's default method to call
        A.super.show();
    }
}

Interface A declares a default method called show().
The default keyword means this method already has an implementation,
 so any class implementing A will inherit this method unless it overrides it.

Class C implements both interfaces A and B. Since both interfaces have a show() default method,
there is an ambiguity about which show() method to inherit.

Key Issue: Ambiguity
When a class implements multiple interfaces that define the same default method, the compiler does not know which implementation to use. For example:

C c = new C();
c.show();

If the show() method is not overridden in C, the compiler will throw a compilation error,
because it cannot decide whether to use A's show() or B's show().


@Override
public void show() {
    A.super.show();
}

ekkada show method ki override eachham and parent nee kuda declare chesam so aa parent method lo unna show method nee override cheyyu ani


Q) What is the output of the below code?

public class Test {
    public static void main(String[] args) {
        String s1 = "Java";
        String s2 = "Java";
        String s3 = new String("Java");

        System.out.println(s1 == s2); // Line 1
        System.out.println(s1 == s3); // Line 2
        System.out.println(s1.equals(s3)); // Line 3
    }
}


String Pool Concept
In Java, string literals (like "Java") are stored in a special memory area called the String Pool. If a string with the same value already exists in the pool, Java will reuse the existing reference instead of creating a new one.

Memory Allocation for Strings

s1 = "Java"; ‚Üí A string literal "Java" is stored in the String Pool, and s1 refers to it.
s2 = "Java"; ‚Üí Since "Java" already exists in the String Pool, s2 refers to the same string as s1.
s3 = new String("Java"); ‚Üí A new String object is created in the heap memory, separate from the string pool.





Object-Oriented Programming (OOP) Principles:
** explain class and object.
1)Can you explain the four basic principles of OOP?
2)What is inheritance, and how is it implemented in Java?
3)How does polymorphism work in Java?
4)What are the differences between abstraction and encapsulation?
5) what is interface and explain the difference between interface and abstraction?
6)what is functional interface





Core Java Concepts:

**  explain collection
*** explain java 8 featurs
**  explain basic datastructurs like arrays, hashmap and hashset , linked list in single line answer



1)What are the main features introduced in Java 8?
2)Can you discuss the internal workings of HashMap?
3)What are the top Java Features?
4)What is JVM?
5)What is JIT?

6)What are Memory storages available with JVM?
7)What is a classloader?
8)Explain public static void main(String args[]) in Java.
9)What is Java String Pool?
10)Explain different data types in Java.
11)When a byte datatype is used?               (optional)
12)Can we declare Pointer in Java?
13)What is the Wrapper class in Java?
14)Why do we need wrapper classes?
15)Differentiate between instance and local variables.
16)What is a Class Variable?                   (optional)
17)What is a static variable?
18)What is the difference between System.out, System.err, and System.in?   (optional)
19)what is thread
20)explain thread life cycle
21)What are the FileInputStream and FileOutputStream?
22)explain string buffer and string builder
23)What is an I/O filter?
24)types of operators
25)Explain the difference between >> and >>> operators.
26)What is dot operator? in java
27)What are the differences between String and StringBuffer?
28)What are the differences between StringBuffer and StringBuilder?
29) What is this keyword in Java?
30)explain access modifiers
31)types of injections


32)Why reflections used in java?

 üåü Reflection in Java
 Reflection in Java is used to inspect and manipulate classes, methods, fields,
 and constructors at runtime. It allows a program to analyze itself and dynamically create objects,
 invoke methods, and access fields without knowing their names at compile time


  üéØ Why is Reflection Used in Java?
  üîç 1. Runtime Type Inspection
  ‚úÖ Helps to examine class metadata (e.g., methods, fields, annotations).

  üìå Example: Class.forName("com.example.MyClass"); // Load a class dynamically



33)what are the different types of class loaders in java

In Java, Class Loaders are responsible for loading class files into memory at runtime. Java provides different types
of class loaders to load classes dynamically.

üìå Types of Class Loaders in Java
Java has the following built-in class loaders:

1Ô∏è‚É£ Bootstrap ClassLoader (Primordial ClassLoader)
Loads: Core Java classes from the rt.jar or $JAVA_HOME/lib.

Implemented in: Native Code (C/C++).

2Ô∏è‚É£ Extension ClassLoader (Platform ClassLoader)
Loads: Classes from the ext directory ($JAVA_HOME/lib/ext or java.ext.dirs).

Example:System.out.println(System.class.getClassLoader()); // Output: null (Bootstrap)
        System.out.println(com.sun.crypto.provider.AESKeyGenerator.class.getClassLoader());


Bootstrap ClassLoader
    ‚¨á
Extension (Platform) ClassLoader
    ‚¨á
Application (System) ClassLoader
    ‚¨á
Custom ClassLoader


34)what is the copy constructor in java

üéØ Copy Constructor in Java
A copy constructor is a special type of constructor used to create a new object by copying an existing object.
Java does not provide a built-in copy constructor, but we can create one manually.

üìå Why Use a Copy Constructor?
‚úÖ To copy object properties from an existing object to a new one.
‚úÖ Avoids modifying the original object when changes are made to the copy.
‚úÖ Useful for creating deep copies of objects with reference-type fields.

class Student {
    String name;
    int age;

    // Constructor
    Student(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Copy Constructor
    Student(Student s) {
        this.name = s.name;  // Copying values
        this.age = s.age;
    }

    void display() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

public class CopyConstructorDemo {
    public static void main(String[] args) {
        Student s1 = new Student("Alice", 22);   // Original Object
        Student s2 = new Student(s1);            // Copying s1 into s2

        // Modifying copied object s2
        s2.name = "Bob";
        s2.age = 25;

        // Display both objects
        System.out.println("Original Object:");
        s1.display();  // Output: Name: Alice, Age: 22

        System.out.println("Copied Object:");
        s2.display();  // Output: Name: Bob, Age: 25
    }
}


35)Explain shallow copy

it is just copy the references not original objects of what references points


üîπ What is Shallow Copy?
A shallow copy copies an object without copying its referenced objects.
Instead, it copies the reference of the nested objects.


üîπ Example: Shallow Copy
Imagine you have a Student object that has a reference to an Address object.

class Address {
    String city;

    Address(String city) {
        this.city = city;
    }
}

class Student implements Cloneable {
    String name;
    Address address; // Reference type

    Student(String name, Address address) {
        this.name = name;
        this.address = address;             NOTE: ekkada address matrame copy chesam not obj
    }

    // Shallow Copy using clone()
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();  // Only copies the reference
    }

    void display() {
        System.out.println("Name: " + name + ", City: " + address.city);
    }
}

public class ShallowCopyExample {
    public static void main(String[] args) throws CloneNotSupportedException {
        Address addr = new Address("New York");
        Student s1 = new Student("Alice", addr);

        Student s2 = (Student) s1.clone(); // Cloning s1 into s2

        // Modifying copied object s2
        s2.address.city = "Los Angeles"; // Change the city in s2

        System.out.println("Original Object:");
        s1.display();  // Output: Name: Alice, City: Los Angeles ‚ùå (Changed)

        System.out.println("Copied Object:");
        s2.display();  // Output: Name: Alice, City: Los Angeles
    }
}


üîπ What Happens Here?
1Ô∏è‚É£ s1 (original object) and s2 (copied object) share the same Address reference.
2Ô∏è‚É£ When we change s2.address.city, it also changes s1.address.city because both objects refer to the same address object.
3Ô∏è‚É£ This is called shallow copy because the copy is not fully independent.


36)explain DeepCopy?

üîπ What is Deep Copy?
A deep copy creates a completely new object, including new copies of all nested objects.

üîπ Example: Deep Copy
To avoid the issue in shallow copy, we need to create a
new Address object inside our copy constructor.



class Address {
    String city;

    Address(String city) {
        this.city = city;
    }

    // Copy constructor for deep copy
    Address(Address other) {
        this.city = other.city; // Creates a new object instead of copying the reference
    }
}

class Student {
    String name;
    Address address;

    Student(String name, Address address) {
        this.name = name;
        this.address = new Address(address); // Creating a new Address object
    }

    void display() {
        System.out.println("Name: " + name + ", City: " + address.city);
    }
}

public class DeepCopyExample {
    public static void main(String[] args) {
        Address addr = new Address("New York");
        Student s1 = new Student("Alice", addr);

        Student s2 = new Student(s1.name, s1.address); // Deep copy using constructor

        s2.address.city = "Los Angeles"; // Change only s2's address

        System.out.println("Original Object:");
        s1.display();  // Output: Name: Alice, City: New York ‚úÖ (No change)

        System.out.println("Copied Object:");
        s2.display();  // Output: Name: Alice, City: Los Angeles
    }
}


üîπ What Happens Here?
1Ô∏è‚É£ A new Address object is created for s2, so it does not share the reference with s1.
2Ô∏è‚É£ Modifying s2.address.city does not affect s1.address.city.
3Ô∏è‚É£ This is called deep copy, as the copy is completely independent of the original.

üìä Difference Between Shallow Copy & Deep Copy

Feature	                Shallow Copy	                                 Deep Copy
Copies Reference?	        ‚úÖ Yes (Same memory reference)	           ‚ùå No (New object is created)
Changes Affect Original?	‚úÖ Yes	                                   ‚ùå No
Performance	                üöÄ Faster	                               üê¢ Slower (creates new objects)
Used For	               When objects have only primitive fields	    When objects have reference fields



37)what is coercion in java


üîπ Coercion in Java
Coercion in Java refers to the automatic or explicit conversion of one data type into another. It happens when an operation requires a different data type than the one provided.

üìå Types of Coercion in Java
Implicit Coercion (Type Promotion / Widening Conversion)

Java automatically converts a smaller data type to a larger data type.

No data loss occurs.

Example: int ‚Üí long, float ‚Üí double.

Explicit Coercion (Type Casting / Narrowing Conversion)
========================================================

The programmer manually converts a larger data type into a smaller one.

Data loss may occur.

Example: double ‚Üí int, long ‚Üí byte.



38)What is Generics



üìå Why Use Generics?
‚úî Type Safety ‚Äì Ensures that the correct data type is used at compile time.
‚úî Code Reusability ‚Äì Allows writing one generic class or method for multiple data types.
‚úî Eliminates Type Casting ‚Äì No need for explicit casting.
‚úî Compile-Time Checking ‚Äì Detects errors early instead of runtime failures.

// Generic class with type parameter <T>
class Box<T> {
    private T value;

    public void setValue(T value) {
        this.value = value;
    }

    public T getValue() {
        return value;
    }
}

public class GenericExample {
    public static void main(String[] args) {
        Box<Integer> intBox = new Box<>();  // Works with Integer
        intBox.setValue(100);
        System.out.println("Integer Value: " + intBox.getValue());

        Box<String> strBox = new Box<>();   // Works with String
        strBox.setValue("Hello Generics!");
        System.out.println("String Value: " + strBox.getValue());
    }
}




39) Java is pass by value or pass by reference?

Java uses pass-by-value for all arguments, including primitive types and objects.
However, how this works for objects often leads to confusion.

üìå Java is Pass-by-Value
üîπ When you pass a variable to a method in Java, you pass a copy of the value.
üîπ For primitive types, this means the actual value is copied.
üîπ For objects, this means the reference (memory address) is copied, not the actual object itself.

So, Java is not pass-by-reference, but pass-by-value of the reference when dealing with objects.

public class PassByValueExample {
    public static void modify(int x) {
        x = 20;  // This change is local to the method
         System.out.println(x); output: 20
    }

    public static void main(String[] args) {
        int num = 10;
        modify(num);
        System.out.println("Value of num: " + num); // Output: 10 (Unchanged) because of this java is pass by value

        }

üîπ Example with Objects (Pass-by-Value of Reference)


        class Person {
            String name;

            Person(String name) {
                this.name = name;
            }
            P--> OBJECT SAME POINT STILL POINT CHESTUNDI SO CHANGE IPOTHUNDHI THIS SHALLOW COPY ALSO
            public static void changeName(Person p) {
                p.name = "Alice";  // Modifies the same object in memory
            }

            public static void main(String[] args) {
                Person person = new Person("Bob");
                changeName(person);
                System.out.println("Person's name: " + person.name); // Output: Alice ‚úÖ (Changed)
            }
        }

‚ùå Reassigning the reference inside the method does NOT change the original object.
class Person {
    String name;

    Person(String name) {
        this.name = name;
    }

    public static void changeReference(Person p) {
        p = new Person("Charlie");  // Reassigning reference (does NOT affect original)
    }

    public static void main(String[] args) {
        Person person = new Person("Bob");
        changeReference(person);
        System.out.println("Person's name: " + person.name); // Output: Bob ‚ùå (Unchanged)
    }
}





    }
}














