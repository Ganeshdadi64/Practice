1)What is the purpose of default methods in interface in java8?

Why Default Methods Were Introduced in Java 8
Before Java 8, interfaces could only have abstract methods, which meant
every class implementing an interface had to provide implementations for
all its methods. While this was fine in many cases, it posed significant
challenges when extending or modifying existing interfaces. Here's a deep
dive into the problems, solutions, and the reasoning behind the introduction
of default methods in Java 8.


1. The Problem: Backward Compatibility
Suppose an interface is widely used by multiple classes in a large application or library. For example:

interface Vehicle {
    void start();
    void stop();
}
Many classes might implement this interface:

class Car implements Vehicle {
    public void start() {
        System.out.println("Car starting...");
    }
    public void stop() {
        System.out.println("Car stopping...");
    }
}

class Bike implements Vehicle {
    public void start() {
        System.out.println("Bike starting...");
    }
    public void stop() {
        System.out.println("Bike stopping...");
    }
}

Problem:
========

Now, if you want to add a new method to the Vehicle interface
(e.g., void refuel()), you would break every single class that implements
this interface. Each class would now be required to implement the new
refuel() method, even if it doesn't need it:

interface Vehicle {
    void start();
    void stop();
    void refuel(); // Added method
}


Impact: This change would force all existing implementations (Car, Bike, etc.)
to update their code, which can be costly and time-consuming.

2. The Solution: Default Methods
To solve this backward compatibility issue, default methods were introduced
 in Java 8. With default methods, you can provide a default implementation
  directly in the interface, so existing classes don’t have to override
  them unless they want to provide a custom implementation.


interface Vehicle {
    void start();
    void stop();

    // New default method
    default void refuel() {
        System.out.println("Default refueling...");
    }
}

class Car implements Vehicle {
    public void start() {
        System.out.println("Car starting...");
    }

    public void stop() {
        System.out.println("Car stopping...");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle car = new Car();
        car.start();   // Output: Car starting...
        car.refuel();  // Output: Default refueling...
    }
}



2)if i have 2 interfaces having same name default methods and the class car implemets bothe the
interfaces which methode is execute?


interface A {
    default void show() {
        System.out.println("A's show");
    }
}

interface B {
    default void show() {
        System.out.println("B's show");
    }
}

class C implements A, B {
    @Override
    public void show() {
        // Explicitly specify which interface's default method to call
        A.super.show();
    }
}

Interface A declares a default method called show().
The default keyword means this method already has an implementation,
 so any class implementing A will inherit this method unless it overrides it.

Class C implements both interfaces A and B. Since both interfaces have a show() default method,
there is an ambiguity about which show() method to inherit.

Key Issue: Ambiguity
When a class implements multiple interfaces that define the same default method, the compiler does not know which implementation to use. For example:

C c = new C();
c.show();

If the show() method is not overridden in C, the compiler will throw a compilation error,
because it cannot decide whether to use A's show() or B's show().


@Override
public void show() {
    A.super.show();
}

ekkada show method ki override eachham and parent nee kuda declare chesam so aa parent method lo unna show method nee override cheyyu ani


Q) What is the output of the below code?

public class Test {
    public static void main(String[] args) {
        String s1 = "Java";
        String s2 = "Java";
        String s3 = new String("Java");

        System.out.println(s1 == s2); // Line 1
        System.out.println(s1 == s3); // Line 2
        System.out.println(s1.equals(s3)); // Line 3
    }
}


String Pool Concept
In Java, string literals (like "Java") are stored in a special memory area called the String Pool. If a string with the same value already exists in the pool, Java will reuse the existing reference instead of creating a new one.

Memory Allocation for Strings

s1 = "Java"; → A string literal "Java" is stored in the String Pool, and s1 refers to it.
s2 = "Java"; → Since "Java" already exists in the String Pool, s2 refers to the same string as s1.
s3 = new String("Java"); → A new String object is created in the heap memory, separate from the string pool.





Object-Oriented Programming (OOP) Principles:
** explain class and object.
1)Can you explain the four basic principles of OOP?
2)What is inheritance, and how is it implemented in Java?
3)How does polymorphism work in Java?
4)What are the differences between abstraction and encapsulation?
5) what is interface and explain the difference between interface and abstraction?
6)what is functional interface





Core Java Concepts:

**  explain collection
*** explain java 8 featurs
**  explain basic datastructurs like arrays, hashmap and hashset , linked list in single line answer



1)What are the main features introduced in Java 8?
2)Can you discuss the internal workings of HashMap?
3)What are the top Java Features?
4)What is JVM?
5)What is JIT?

6)What are Memory storages available with JVM?
7)What is a classloader?
8)Explain public static void main(String args[]) in Java.
9)What is Java String Pool?
10)Explain different data types in Java.
11)When a byte datatype is used?               (optional)
12)Can we declare Pointer in Java?
13)What is the Wrapper class in Java?
14)Why do we need wrapper classes?
15)Differentiate between instance and local variables.
16)What is a Class Variable?                   (optional)
17)What is a static variable?
18)What is the difference between System.out, System.err, and System.in?   (optional)
19)what is thread
20)explain thread life cycle
21)What are the FileInputStream and FileOutputStream?
22)explain string buffer and string builder
23)What is an I/O filter?
24)types of operators
25)Explain the difference between >> and >>> operators.
26)What is dot operator? in java
27)What are the differences between String and StringBuffer?
28)What are the differences between StringBuffer and StringBuilder?
29) What is this keyword in Java?
30)explain access modifiers
31)types of injections





