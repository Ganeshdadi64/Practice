******How consumer consumes message from Topi
===============================================

Understanding Kafka Consumer Partition Assignment in a Consumer Group
Kafka distributes partitions among consumers in a Consumer Group to ensure scalability and parallel processing.
Let’s break down these two key points with examples.



1)Each Partition is Assigned to One Consumer within a Group
==========================================================

A Kafka topic can have multiple partitions.
A consumer group can have multiple consumers.
Each partition is assigned to only one consumer within a group
to ensure that a message is processed by only one consumer in that group.

Example: Single Consumer in a Consumer Group

🔹 Topic: order-topic
🔹 Partitions: 3 (P0, P1, P2)
🔹 Consumer Group: order-group
🔹 Consumers in the Group: 1 (Consumer-1)

Since only one consumer exists, it will consume all partitions:

Partition	Assigned to Consumer
P0	Consumer-1
P1	Consumer-1
P2	Consumer-1
✔ All messages in order-topic will be processed by Consumer-1.


2)2️⃣ If Multiple Consumers Exist in a Group, Kafka Balances Partitions Among Them

If more consumers join the group, Kafka automatically rebalances and assigns partitions to different consumers.
Partitions are distributed evenly among available consumers.

Example: Multiple Consumers in a Consumer Group
🔹 Topic: order-topic
🔹 Partitions: 3 (P0, P1, P2)
🔹 Consumer Group: order-group
🔹 Consumers in the Group: 3 (Consumer-1, Consumer-2, Consumer-3)

Kafka assigns one partition per consumer (if possible):



Partition	Assigned to Consumer
P0	Consumer-1
P1	Consumer-2
P2	Consumer-3
✔ Now, each consumer gets one partition and processes messages in parallel.


3)What Happens If We Add More Consumers Than Partitions?
🔹 Scenario: 4 Consumers (Consumer-1, Consumer-2, Consumer-3, Consumer-4)
🔹 Partitions: 3 (P0, P1, P2)



Partition	Assigned to Consumer
P0	Consumer-1
P1	Consumer-2
P2	Consumer-3
❌ Extra Consumer (C4)	Idle (No Partitions Assigned)
✔ Consumers > Partitions → Some consumers remain idle.
✔ Kafka does NOT assign a single partition to multiple consumers in the same group.



🔄 What Happens When a Consumer Joins or Leaves the Group?
If a New Consumer Joins (Consumer-4 Added)
    Kafka rebalances the partitions among 4 consumers.
    Now, some consumers may handle fewer partitions.
If a Consumer Leaves (Consumer-2 Crashes)
    Kafka redistributes the partitions among the remaining consumers.
    The partitions assigned to Consumer-2 will now be assigned to another active consumer.


 🔥 Summary
 ✅ One partition is assigned to only one consumer within a group.
 ✅ If multiple consumers exist, Kafka evenly distributes partitions among them.
 ✅ More consumers than partitions → Some consumers remain idle.
 ✅ When consumers join or leave, Kafka rebalances partitions automatically.














Use cases of apachi kafha
========================

1)Messaging
2)website activity tracking
3) metrics
4)streaming process

in application properties lo we are setting consumers and producer properties and
producer: just like a one service which is send some message
consumer: just like a one service which is received a message from producer

here consumers are assigned group ids as well
@kafkaListner(topic name="message1"  groupid="ganesh")
ekkada topic name este aa topic ki ee consumer class subscribe inattu and groupid as well

for example in application properties lo consumer group lo gopi ani undhi like consumer2 class, ee class
message1 nee read cheyya ledu because group different

@kafkaListner(topic name="message2"  groupid="gopi") for consumer1 class
ee message nee consumer class read cheyyaledu because that is another group only consumer1 can read



Note:
a

up now we are dealing with only normal string if suppose producer sends a serilizable Json data, we need to deserilize that data and consume
for that we will use JsonDeserilizer inbuild class

Producer Java object nee serilize chesi json ga convert chesi topic ki send chestundhi then consumer aa json datane jsondeserilize chesi java object ga convert chesi use chesukuntundi
producer cannot send java object directly because that consumer may uses python language