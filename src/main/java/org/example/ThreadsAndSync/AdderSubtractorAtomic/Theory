ðŸ”¹ What is the Shared Resource in This Code?
The shared resource here is the AtomicInteger value that is accessed and modified by both Adder and Subtractor threads.
AtomicInteger ensures thread-safe updates without needing explicit locks or synchronization.


ðŸ”¹ What It Does?

Implements Runnable (so it can be run as a thread).
Takes an AtomicInteger as input.
Inside the run() method, it adds numbers from 1 to 10,000 to value using addAndGet().
addAndGet(i) ensures atomic addition without race conditions.


Why?
Adder thread adds 1 to 10,000 â†’ total sum = 50,005,000
Subtractor thread subtracts 1 to 10,000 â†’ total sum = -50,005,000
Initial value = 1
Final value = 1 + 50,005,000 - 50,005,000 = 1
